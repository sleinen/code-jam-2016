(defun B (basename)
  (with-open-file (file (format nil "~A.in" basename))
    (with-open-file (output (format nil "~A.out" basename)
			    :direction :output
			    :if-does-not-exist :create
			    :if-exists :supersede)
      (let ((ncases (read file)))
	(dotimes (k ncases)
	  (let ((S (read-line file)))
	    (let ((space-pos (position #\Space S)))
	      (let ((C (subseq S 0 space-pos))
		    (J (subseq S (1+ space-pos))))
		(multiple-value-bind (cprime jprime)
		    (closest-states C J)
		  (format output "Case #~D: ~A ~A~%" (1+ k)
			  cprime jprime))))))))))

(defun closest-states (C J)
  (let ((l (length C)))
    (let ((rightmost-unknown
	   (do ((k (- l 1) (- k 1)))
	       ((or (< k 0)
		    (char= #\? (char C k))
		    (char= #\? (char J k)))
		(1+ k)))))
      (let ((Csuf (subseq C rightmost-unknown))
	    (Jsuf (subseq J rightmost-unknown)))
	(let ((c-end (if (= (length Csuf) 0) 0 (parse-integer Csuf)))
	      (j-end (if (= (length Jsuf) 0) 0 (parse-integer Jsuf))))
	  (warn "C: ~A J: ~A ~D ~D" C J c-end j-end)
	  (values "?" "?"))))))
