(defun B (basename)
  (with-open-file (file (format nil "~A.in" basename))
    (with-open-file (output (format nil "~A.out" basename)
			    :direction :output
			    :if-does-not-exist :create
			    :if-exists :supersede)
      (let ((ncases (read file)))
	(dotimes (k ncases)
	  (let ((S (read-line file)))
	    (let ((space-pos (position #\Space S)))
	      (let ((C (subseq S 0 space-pos))
		    (J (subseq S (1+ space-pos))))
		(multiple-value-bind (cprime jprime)
		    (closest-states C J)
		  (format output "Case #~D: ~A ~A~%" (1+ k)
			  cprime jprime))))))))))

(defun closest-states (C J)
  (multiple-value-bind (cprime jprime)
      (mindiff (coerce C 'list) (coerce J 'list))
    (values (format nil "~v,'0D" (length C) cprime)
	    (format nil "~v,'0D" (length C) jprime))))

(defun mindiff (s1 s2)
  (mindiff-1 '() '() 0 0 s1 s2))

(defun mindiff-1 (p1 p2 v1 v2 s1 s2)
  (cond ((endp s1)
	 (assert (endp s2))
	 (values v1 v2))
	((and (not (char= (first s1) #\?))
	      (not (char= (first s2) #\?)))
	 (mindiff-1 (cons (first s1) p1)
		    (cons (first s2) p2)
		    (+ (* v1 10) (digit-char-p (first s1)))
		    (+ (* v2 10) (digit-char-p (first s2)))
		    (rest s1)
		    (rest s2)))
	((and (char= (first s1) #\?)
	      (char= (first s2) #\?))
	 (cond ((= v1 v2)
		(mindiff-1 (cons #\0 p1)
			   (cons #\0 p2)
			   (+ (* v1 10) 0)
			   (+ (* v2 10) 0)
			   (rest s1)
			   (rest s2)))
	       ((< v1 v2)
		(mindiff-1 (cons #\9 p1)
			   (cons #\0 p2)
			   (+ (* v1 10) 9)
			   (+ (* v2 10) 0)
			   (rest s1)
			   (rest s2)))
	       (t
		(mindiff-1 (cons #\0 p1)
			   (cons #\9 p2)
			   (+ (* v1 10) 0)
			   (+ (* v2 10) 9)
			   (rest s1)
			   (rest s2)))))
	((char= (first s1) #\?)
	 (cond ((= v1 v2)
		(mindiff-1 (cons (first s2) p1)
			   (cons (first s2) p2)
			   (+ (* v1 10) (digit-char-p (first s2)))
			   (+ (* v2 10) (digit-char-p (first s2)))
			   (rest s1)
			   (rest s2)))
	       ((< v1 v2)
		(mindiff-1 (cons #\9 p1)
			   (cons (first s2) p2)
			   (+ (* v1 10) 9)
			   (+ (* v2 10) (digit-char-p (first s2)))
			   (rest s1)
			   (rest s2)))
	       (t
		(mindiff-1 (cons #\0 p1)
			   (cons (first s2) p2)
			   (+ (* v1 10) 0)
			   (+ (* v2 10) (digit-char-p (first s2)))
			   (rest s1)
			   (rest s2)))))
	((char= (first s2) #\?)
	 (cond ((= v1 v2)
		(mindiff-1 (cons (first s1) p1)
			   (cons (first s1) p2)
			   (+ (* v1 10) (digit-char-p (first s1)))
			   (+ (* v2 10) (digit-char-p (first s1)))
			   (rest s1)
			   (rest s2)))
	       ((< v1 v2)
		(mindiff-1 (cons (first s1) p1)
			   (cons #\0 p2)
			   (+ (* v1 10) (digit-char-p (first s1)))
			   (+ (* v2 10) 0)
			   (rest s1)
			   (rest s2)))
	       (t
		(mindiff-1 (cons (first s1) p1)
			   (cons #\9 p2)
			   (+ (* v1 10) (digit-char-p (first s1)))
			   (+ (* v2 10) 9)
			   (rest s1)
			   (rest s2)))))
	(t (error "Can't happen"))))
