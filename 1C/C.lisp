(defun C (basename)
  (with-open-file (file (format nil "~A.in" basename))
    (with-open-file (output (format nil "~A.out" basename)
			    :direction :output
			    :if-does-not-exist :create
			    :if-exists :supersede)
      (let ((ncases (read file)))
	(dotimes (i ncases)
	  (let* ((J (read file))
		 (P (read file))
		 (S (read file))
		 (K (read file)))
	    (multiple-value-bind (count result)
		(fashion J P S K)
	      (format output "Case #~D: ~D~%~{~{~A~}~%~}" (1+ i)
		      count result)))
	  )))))

(defun fashion (J P S K)
  (let ((result '())
	(count 0)
	(jp-count (make-hash-table :test #'equal))
	(js-count (make-hash-table :test #'equal))
	(ps-count (make-hash-table :test #'equal)))
    (dotimes (j1 J)
      (dotimes (p1 P)
	(dotimes (k1 (min K S))
	  (let ((s1 (mod (+ j1 p1 k1) S)))
	    (unless (or (>= (gethash (cons j1 p1) jp-count 0) K)
			(>= (gethash (cons j1 s1) js-count 0) K)
			(>= (gethash (cons p1 s1) ps-count 0) K))
	      (incf count)
	      (incf (gethash (cons j1 p1) jp-count 0))
	      (incf (gethash (cons j1 s1) js-count 0))
	      (incf (gethash (cons p1 s1) ps-count 0))
	      (push (mapcar #'1+ (list j1 p1 s1)) result))))))
    (values count result)))
